name: KYPO Test Workflow

# on:
#   workflow_call
on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

env:
  # variables from GL CI
  NAME: "ubuntu" # Name of packer configuration file without `.json`, for example kali
  TYPE: "linux" # linux or windows
  DISTRO: "ubuntu" # See https://docs.openstack.org/glance/latest/admin/useful-image-properties.html property os_distro
  GUI_ACCESS: "true" # Whether VNC or RDP server is installed and configured for [Guacamole](https://docs.crp.kypo.muni.cz/user-guide-advanced/sandboxes/sandbox-access/#apache-guacamole)
  
  # .terraform-build
  TF_ROOT: ${{ github.workspace }}
  TF_STATE_NAME: ${{ github.ref_name }}
  TF_VAR_CI_SERVER_HOST: ${{ github.server_url }}
  TF_VAR_CI_COMMIT_SHORT_SHA: ${{ github.sha }}
  
  # deploy-qemu
  KEY: "qemu"
  OS_AUTH_TYPE: "v3applicationcredential"
  OS_AUTH_URL: "https://identity.cloud.muni.cz/v3"
  OS_IDENTITY_API_VERSION: "3"
  OS_INTERFACE: "public"
  OS_REGION_NAME: "brno1"

  # test-qemu
  TF_VAR_NAME: ${NAME}
  TF_VAR_TYPE: ${TYPE}
  TF_VAR_DISTRO: ${DISTRO}
  TF_VAR_GUI_ACCESS: ${GUI_ACCESS}
  TF_VAR_ACCESS_TOKEN: ${ACCESS_TOKEN}

  OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.OS_APPLICATION_CREDENTIAL_ID }}
  OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  TF_VAR_KYPO_ENDPOINT: ${{ secrets.TF_VAR_KYPO_ENDPOINT }}
  TF_VAR_CI_PROJECT_URL: ${{ secrets.TF_VAR_CI_PROJECT_URL }}

  PACKER_LOG: 1

jobs:
  build-qemu:
    runs-on: self-hosted
    steps:
      # Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # .build (install packer and some modules)
      - name: Setup packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: latest

      - name: Install Packer Plugins
        run: |
          packer plugins install github.com/hashicorp/qemu
          packer plugins install github.com/hashicorp/virtualbox
          packer plugins install github.com/hashicorp/vagrant
    
      - name: Got to a folder
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system

      # Custom script from the step
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Packer
        run: |
          cd ubuntu-22.04-master
          packer build -only=qemu $NAME.json

      - name: Work with terraform
        run: |
          terraform destroy
          terraform plan -target=module.topology.openstack_images_image_v2.test_image
          terraform apply

      # TEST_QEMU

      # # .terraform-build
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3
      
      # - name: Terraform plan & apply
      #   run: |
      #     terraform plan 
      #     terraform apply
      #   # and some stuff with artifacts (not sure)

      # DEPLOY_QEMU

      # Tenplates (TODO there are some CI variables)
      - name: (define) get-version-from-changelog
        run: |
          get_version_from_changelog() {          
            test ! -z "$KEY"
            if [ -z "$VERSION" ]; then
              VERSION=$(cat CHANGELOG.md | sed -r -e "/##\s+.*\[$KEY-[0-9]+\.[0-9]+\.[0-9]+\]/!d" -e "s/.*$KEY-([0-9]+\.[0-9]+\.[0-9]+).*/\1/" | sort --version-sort --reverse | head -n 1)
              test ! -z "$VERSION"
            fi
            echo "$VERSION"
          }

          export -f get_version_from_changelog

      - name: (define) git-tag
        run: |
          git_tag() {
            git config user.name "$GITLAB_USER_NAME"; git config user.email "$GITLAB_USER_EMAIL"
            git tag -a "$KEY-$VERSION" -m "$KEY version $VERSION"
            git push https://root:$ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git "$KEY-$VERSION"          
          }
          export -f git_tag

      - name: (define) upload-image-to-openstack
        run: |
          upload_image_to_openstack() {
            openstack image create --file target-qemu/* --property hw_scsi_model=virtio-scsi --property hw_disk_bus=scsi --property hw_rng_model=virtio --property hw_qemu_guest_agent=yes --property os_require_quiesce=yes --property os_type=$TYPE --property os_distro=$DISTRO --property owner_specified.openstack.version=$VERSION --property owner_specified.openstack.gui_access=$GUI_ACCESS --property owner_specified.openstack.created_by=munikypo --shared $CI_PROJECT_NAME-$VERSION
          }
          export -f upload_image_to_openstack

      
      - name: upload-image-to-openstack-object-store
        run: |
          upload_image_to_openstack_object_store() {
            cd target-qemu
            IMAGE_FILENAME=$(ls)
            mv $IMAGE_FILENAME $IMAGE_FILENAME.raw

            s3cmd -c $S3_CREDENTIALS get s3://kypo-images/SHA256SUMS SHA256SUMS
            s3cmd -c $S3_CREDENTIALS get s3://kypo-images/MD5SUMS MD5SUMS
            zip $CI_PROJECT_NAME.raw.zip $IMAGE_FILENAME.raw
            sed -i "/$CI_PROJECT_NAME.raw.zip/d" SHA256SUMS
            sha256sum $CI_PROJECT_NAME.raw.zip >> SHA256SUMS
            sed -i "/$CI_PROJECT_NAME.raw.zip/d" MD5SUMS
            md5sum $CI_PROJECT_NAME.raw.zip >> MD5SUMS

            qemu-img convert -f raw -O qcow2 $IMAGE_FILENAME.raw $CI_PROJECT_NAME.qcow2
            sed -i "/$CI_PROJECT_NAME.qcow2/d" SHA256SUMS
            sha256sum $CI_PROJECT_NAME.qcow2 >> SHA256SUMS
            sed -i "/$CI_PROJECT_NAME.qcow2/d" MD5SUMS
            md5sum $CI_PROJECT_NAME.qcow2 >> MD5SUMS

            sort -k 2 -o SHA256SUMS SHA256SUMS
            sort -k 2 -o MD5SUMS MD5SUMS
            s3cmd -c $S3_CREDENTIALS put $CI_PROJECT_NAME.qcow2 $CI_PROJECT_NAME.raw.zip SHA256SUMS MD5SUMS s3://kypo-images
            cd -
          }
          export -f upload_image_to_openstack_object_store


      # before_script

      - name: get-version-from-changelog
        run: get_version_from_changelog

      - name: something
        run: |
          mkdir -p target-qemu
          openstack image save --file "target-qemu/$NAME" "$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA" # pushes the img to openstach

      - name: upload_image_to_openstack
        run: upload_image_to_openstack

      # The custom script

      - run: |
          HEAD_IMAGE_ID=$(openstack image show --column id --format value $CI_PROJECT_NAME-$VERSION)
          # If previous image version exists, delete it or rename it. Once all our images follow the latest naming convention, this block can be simplified
          if openstack image show $CI_PROJECT_NAME > /dev/null; then
            PREV_VERSION=$(openstack image show $CI_PROJECT_NAME --column properties --format json | jq '.properties."owner_specified.openstack.version"' -re) || PREV_VERSION=0.1.0
            if openstack image show $CI_PROJECT_NAME-$PREV_VERSION > /dev/null; then
              openstack image delete $CI_PROJECT_NAME || openstack image set $CI_PROJECT_NAME --name $CI_PROJECT_NAME-DEPRECATED
            else
              openstack image set $CI_PROJECT_NAME --name $CI_PROJECT_NAME-$PREV_VERSION
            fi
          fi
          openstack image set $CI_PROJECT_NAME-$VERSION --name $CI_PROJECT_NAME

      - name: upload_image_to_openstack
        run: upload_image_to_openstack

      - run: STABLE_IMAGE_ID=$(openstack image show --column id --format value $CI_PROJECT_NAME-$VERSION)

      - name: git_tag
        run: git_tag

      - run: |
          # Share the image to other OpenStack projects
          while read -r PROJECT_ID; do
            openstack image add project $HEAD_IMAGE_ID $PROJECT_ID
            openstack image add project $STABLE_IMAGE_ID $PROJECT_ID
          done < <(echo $APPLICATION_CREDENTIALS | jq -r '.[] | .project_id')
          # Accept the sharing from each project
          while read -r APP_ID && read -r APP_SECRET; do
            OS_APPLICATION_CREDENTIAL_ID=$APP_ID
            OS_APPLICATION_CREDENTIAL_SECRET=$APP_SECRET
            openstack image set --accept $HEAD_IMAGE_ID
            openstack image set --accept $STABLE_IMAGE_ID
          done < <(echo $APPLICATION_CREDENTIALS | jq -r '.[] | (.app_cred_id, .app_cred_secret)')
          
          if [ $TYPE != "windows" ]; then # this is only cause of licensiung. pusg the img to a commen storage/'repo'
            # .upload-image-to-openstack-object-store
            upload_image_to_openstack_object_store
            # cd target-qemu
            # IMAGE_FILENAME=$(ls)
            # mv $IMAGE_FILENAME $IMAGE_FILENAME.raw

            # s3cmd -c $S3_CREDENTIALS get s3://kypo-images/SHA256SUMS SHA256SUMS
            # s3cmd -c $S3_CREDENTIALS get s3://kypo-images/MD5SUMS MD5SUMS
            # zip $CI_PROJECT_NAME.raw.zip $IMAGE_FILENAME.raw
            # sed -i "/$CI_PROJECT_NAME.raw.zip/d" SHA256SUMS
            # sha256sum $CI_PROJECT_NAME.raw.zip >> SHA256SUMS
            # sed -i "/$CI_PROJECT_NAME.raw.zip/d" MD5SUMS
            # md5sum $CI_PROJECT_NAME.raw.zip >> MD5SUMS

            # qemu-img convert -f raw -O qcow2 $IMAGE_FILENAME.raw $CI_PROJECT_NAME.qcow2
            # sed -i "/$CI_PROJECT_NAME.qcow2/d" SHA256SUMS
            # sha256sum $CI_PROJECT_NAME.qcow2 >> SHA256SUMS
            # sed -i "/$CI_PROJECT_NAME.qcow2/d" MD5SUMS
            # md5sum $CI_PROJECT_NAME.qcow2 >> MD5SUMS

            # sort -k 2 -o SHA256SUMS SHA256SUMS
            # sort -k 2 -o MD5SUMS MD5SUMS
            # s3cmd -c $S3_CREDENTIALS put $CI_PROJECT_NAME.qcow2 $CI_PROJECT_NAME.raw.zip SHA256SUMS MD5SUMS s3://kypo-images
            # cd -
          fi

      # DESTROY

      # Here we are at 'cleanup'
      - name: Destroy terraform
        run: |
          terraform destroy # it also calls KYPO API to destroy the SB
          
          # todo we probably dont need it
          curl --header "Private-Token:${TF_PASSWORD:-$CI_JOB_TOKEN}" --request DELETE "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}" || true



  # test-qemu-cleanup:
  #   steps:
  #     # TODO test-qemu
  #     # TODO .terraform-destroy

